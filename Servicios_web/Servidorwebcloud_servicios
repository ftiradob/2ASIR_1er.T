

Croqueta

Modificamos los siguientes campos:

debian@croqueta:~$ sudo nano /etc/hosts

127.0.1.1 croqueta.fernando.gonzalonazareno.org croqueta

debian@croqueta:~$ sudo nano /etc/hostname

croqueta

Configuramos para que sea permanente:

debian@croqueta:~$ sudo nano /etc/cloud/cloud.cfg

preserve_hostname: true

Configuramos /etc/resolv.conf :

debian@croqueta:~$ sudo nano /etc/resolv.conf

domain fernando.gonzalonazareno.org
search fernando.gonzalonazareno.org.
nameserver 192.168.202.2

Ahora descomentamos estas líneas en el siguiente fichero para que persistan en el /etc/resolv.conf :

debian@croqueta:~$ sudo nano /etc/dhcp/dhclient.conf

supersede domain-name "fernando.gonzalonazareno.org";
supersede domain-search "fernando.gonzalonazareno.org";

Reiniciamos la máquina y comprobamos:

debian@croqueta:~$ sudo reboot
debian@croqueta:~$ Connection to croqueta closed by remote host.
Connection to croqueta closed.
ftirado@nazo:~$ ssh debian@croqueta
debian@croqueta:~$ cat /etc/resolv.conf 
domain fernando.gonzalonazareno.org
search fernando.gonzalonazareno.org.
nameserver 192.168.202.2
debian@croqueta:~$ hostname -f
croqueta.fernando.gonzalonazareno.org




Salmorejo

Modificamos los siguientes campos:

[centos@salmorejo ~]$ sudo nano /etc/hosts

127.0.1.1 salmorejo.fernando.gonzalonazareno.org salmorejo

[centos@salmorejo ~]$ sudo nano /etc/hostname

salmorejo

Añadimos nuestro dominio al siguiente fichero:

[centos@salmorejo ~]$ sudo nano /etc/resolv.conf

; generated by /usr/sbin/dhclient-script
search fernando.gonzalonazareno.org openstacklocal
nameserver 192.168.202.2

Lo hacemos persistente:

[centos@salmorejo ~]$ sudo chattr +i /etc/resolv.conf

Reiniciamos la máquina y comprobamos:

[centos@salmorejo ~]$ sudo reboot
Connection to 172.22.200.114 closed by remote host.
Connection to 172.22.200.114 closed.
[centos@salmorejo ~]$ sudo cat /etc/resolv.conf 
; generated by /usr/sbin/dhclient-script
search fernando.gonzalonazareno.org openstacklocal
nameserver 192.168.202.2
[centos@salmorejo ~]$ hostname -f
salmorejo.fernando.gonzalonazareno.org


Tortilla

Modificamos los siguientes campos:

ubuntu@tortilla:~$ sudo nano /etc/hosts

127.0.1.1 tortilla.fernando.gonzalonazareno.org tortilla

ubuntu@tortilla:~$ sudo nano /etc/hostname

tortilla

Modificamos el siguiente fichero con las siguientes líneas:

ubuntu@tortilla:~$ sudo nano /etc/systemd/resolved.conf
[Resolve]
DNS=192.168.202.2
Domains=fernando.gonzalonazareno.org

Reiniciamos la máquina y comprobamos que persiste:

ubuntu@tortilla:/etc/systemd$ sudo reboot
Connection to tortilla closed by remote host.
Connection to tortilla closed.
ftirado@nazo:~$ ssh ubuntu@tortilla 
ubuntu@tortilla:~$ cat /etc/resolv.conf 
nameserver 127.0.0.53
options edns0
search fernando.gonzalonazareno.org openstacklocal
ubuntu@tortilla:~$ hostname -f
tortilla.fernando.gonzalonazareno.org

SERVIDOR WEB

Añadimos el repositorio de nginx:

[centos@salmorejo ~]$ sudo yum install epel-release

Instalamos nginx:

[centos@salmorejo ~]$ sudo yum install nginx

Instalamos php y servidor de aplicaciones:

[centos@salmorejo nginx]$ sudo yum install php php-fpm

Modificamos la siguiente línea del archivo para mayor seguridad:

[centos@salmorejo conf.d]$ sudo nano /etc/php.ini 

cgi.fix_pathinfo=0

Modificamos las siguientes líneas del archivo:

[centos@salmorejo conf.d]$ sudo nano /etc/php-fpm.d/www.conf

listen = /var/run/php-fpm/php-fpm.sock
listen.owner = nobody
listen.group = nobody
user = nginx
group = nginx

Iniciamos servidor de aplicaciones:

[centos@salmorejo ~]$ sudo systemctl start php-fpm

Configuramos un .conf:

[centos@salmorejo ~]$ sudo nano /etc/nginx/conf.d/default.conf 

server {
    listen       80;
    server_name  centosfernando.org;

    root   /usr/share/nginx/html;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ =404;
    }
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}

Reiniciamos el servicio:

[centos@salmorejo ~]$ sudo systemctl restart nginx

Creamos un php de prueba:

[centos@salmorejo ~]$ sudo nano /usr/share/nginx/html/index.php

<?php phpinfo(); ?>

Añadimos en nuestra máquina la correspondiente línea en el /etc/hosts y probamos:

!phpcentosnginx.png!

SERVIDOR BASE DE DATOS

Instalamos mariadb en tortilla:

ubuntu@tortilla:~$ sudo apt install mariadb-server

Configuramos la contraseña y otros detalles de la base de datos:

ubuntu@tortilla:~$ sudo mysql_secure_installation

Configuramos el acceso:

ubuntu@tortilla:~$ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf

bind-address            = 0.0.0.0

Reiniciamos el servicio y verificamos el cambio:

ubuntu@tortilla:~$ sudo systemctl restart mariadb.service
ubuntu@tortilla:~$ sudo netstat -anp | grep 3306
tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      2944/mysqld 

Permitimos el acceso al puerto 3306:

sudo iptables -I INPUT -p tcp -m tcp --dport 3306 -j ACCEPT

Por último, damos los permisos en la base de datos:

MariaDB [(none)]> create database invitado1_db;
MariaDB [(none)]> create user 'invitado1' identified by 'dios';
MariaDB [(none)]> grant all on invitado1_db.* to invitado1@localhost identified by 'dios';
MariaDB [(none)]> grant all on invitado1_db.* to invitado1@10.0.0.12 identified by 'dios';
MariaDB [(none)]> grant all on invitado1_db.* to invitado1@10.0.0.15 identified by 'dios';

Conectando desde Croqueta

debian@croqueta:~$ sudo apt install mariadb-client

debian@croqueta:~$ sudo mysql -u invitado1 -p invitado1_db -h 10.0.0.9
Enter password: 
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 42
Server version: 10.1.41-MariaDB-0ubuntu0.18.04.1 Ubuntu 18.04

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [invitado1_db]> 

Conectando desde Salmorejo

[centos@salmorejo ~]$ sudo yum groupinstall -y mariadb-client

[centos@salmorejo ~]$ sudo mysql -u invitado1 -p invitado1_db -h 10.0.0.9
Enter password: 
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 41
Server version: 10.1.41-MariaDB-0ubuntu0.18.04.1 Ubuntu 18.04

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [invitado1_db]> 

---

Tarea 3. Instalación aplicaciones web (APLICACIONES WEB)

WORDPRESS

Lo primero que tenemos que hacer es crear una base de datos en "tortilla" y darle permiso de conexión a "salmorejo":

MariaDB [(none)]> create database invitado1_db;
MariaDB [(none)]> create user 'invitado2' identified by 'dios';
MariaDB [(none)]> grant all on invitado1_db.* to invitado2@localhost identified by 'dios';
MariaDB [(none)]> grant all on invitado1_db.* to invitado2@10.0.0.15 identified by 'dios';

Tras esto volvemos a "salmorejo", nos descargamos wordpress, lo descomprimimos y le cambiamos los permisos:

[centos@salmorejo ~]$ sudo wget https://es.wordpress.org/latest-es_ES.zip
[centos@salmorejo ~]$ sudo unzip latest-es_ES.zip

Creamos en la ruta /etc/nginx/conf.d/ el .conf:

[centos@salmorejo conf.d]$ sudo nano default.conf
server {
    listen       80;
    server_name  www.fernando.gonzalonazareno.org;

    # note that these lines are originally from the "location /" block
    root   /usr/share/nginx/html/wordpress/wordpress;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ =404;
    }
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html/wordpress/wordpress;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}

Ahora nos bajamos los módulos de php necesarios:

[centos@salmorejo ~]$ sudo yum install php72-php-fpm php72-php-gd php72-php-json php72-php-mbstring php72-php-mysqlnd php72-php-xml php72-php-xmlrpc php72-php-opcache


Selinux nos dara algunos problemas para acceder a wordpress, por lo que hay que introducir los siguientes comandos para permitir el acceso:

[centos@salmorejo ~]$ sudo chown nginx:nginx -R /usr/share/nginx/html/wordpress
[centos@salmorejo ~]$ sudo find /usr/share/nginx/html/wordpress -type f -exec chmod 0644 {} \;
[centos@salmorejo ~]$ sudo find /usr/share/nginx/html/wordpress -type d -exec chmod 0755 {} \;
[centos@salmorejo ~]$ sudo chcon -t httpd_sys_content_t /usr/share/nginx/html/wordpress -R
[centos@salmorejo ~]$ sudo chcon -t httpd_sys_rw_content_t /usr/share/nginx/html/wordpress/wp-config-sample.php 
[centos@salmorejo ~]$ sudo chcon -t httpd_sys_rw_content_t /usr/share/nginx/html/wordpress/wp-content -R
[centos@salmorejo ~]$ sudo systemctl restart nginx

Configuramos para que wordpress tenga acceso a la base de datos:

[centos@salmorejo wordpress]$ sudo setsebool -P httpd_can_network_connect_db 1

Comprobamos que se ha cambiado correctamente con:

[centos@salmorejo wordpress]$ getsebool -a | grep httpd
httpd_can_network_connect_db --> on

Probamos:

!adminwordpress.png!

Añadimos contenido y probamos nuestro sitio web:

!blogwordpress.png!

+*URL amigable*+

Como podemos comprobar, la URL por defecto no es amigable:

!noamigable.png!

Para cambiar esto, primero debemos de modificar la siguiente línea eliminando el "=404":

[centos@salmorejo conf.d]$ sudo nano default.conf 
location / {
        try_files $uri $uri/ /index.php?$args;
    }

Ahora nos metemos en el admin de wordpress y creamos la URL amigable:

!admigable.png!

Nos volvemos a meter en el mismo post y veremos que la URL se ha vuelto amigable:

!amigablewp.png!


NEXTCLOUD

Lo primero que tenemos que hacer es crear una base de datos en "tortilla" y darle permiso de conexión a "salmorejo":

MariaDB [(none)]> create database invitadonext_db;
MariaDB [(none)]> create user 'invitadonext' identified by 'dios';
MariaDB [(none)]> grant all on invitadonext_db.* to invitadonext@localhost identified by 'dios';
MariaDB [(none)]> grant all on invitadonext_db.* to invitadonext@10.0.0.15 identified by 'dios';

Tras esto volvemos a "salmorejo", nos descargamos nextcloud, lo descomprimimos y le cambiamos los permisos:

[centos@salmorejo html]$ sudo wget https://download.nextcloud.com/server/releases/nextcloud-17.0.1.zip
[centos@salmorejo html]$ sudo unzip nextcloud-17.0.1.zip
[centos@salmorejo html]$ sudo chown nginx:nginx nextcloud/ -R

Creamos en la ruta /etc/nginx/conf.d/ el .conf:

[centos@salmorejo conf.d]$ sudo nano nextcloud.conf 

server {
    listen       80;
    server_name  cloud.fernando.gonzalonazareno.org;

    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
    add_header Referrer-Policy no-referrer;
    add_header X-Frame-Options "SAMEORIGIN";

    root /usr/share/nginx/html/nextcloud/;

    access_log /var/log/nginx/nextcloud.access;
    error_log /var/log/nginx/nextcloud.error;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location = /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }
    location = /.well-known/caldav {
       return 301 $scheme://$host/remote.php/dav;
    }

    location ~ /.well-known/acme-challenge {
      allow all;
    }

    client_max_body_size 512M;
    fastcgi_buffers 64 4K;
    fastcgi_read_timeout 300;

    gzip off;

    error_page 403 /core/templates/403.php;
    error_page 404 /core/templates/404.php;

    location / {
       rewrite ^ /index.php$uri;
    }

    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
       deny all;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
       deny all;
     }

    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
       include fastcgi_params;
       fastcgi_split_path_info ^(.+\.php)(/.*)$;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
       #Avoid sending the security headers twice
       fastcgi_param modHeadersAvailable true;
       fastcgi_param front_controller_active true;
       fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
       fastcgi_intercept_errors on;
       fastcgi_request_buffering off;
    }

    location ~ ^/(?:updater|ocs-provider)(?:$|/) {
       try_files $uri/ =404;
       index index.php;
    }

    location ~* \.(?:css|js)$ {
        try_files $uri /index.php$uri$is_args$args;
        add_header Cache-Control "public, max-age=7200";
        # Add headers to serve security related headers (It is intended to
        # have those duplicated to the ones above)
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Robots-Tag none;
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;
        # Optional: Don't log access to assets
        access_log off;
   }

   location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {
        try_files $uri /index.php$uri$is_args$args;
        # Optional: Don't log access to other assets
        access_log off;
   }
}


Ahora instalamos los módulos php necesarios:

[centos@salmorejo ~]$ yum install php-common php-gd php-json php-curl php-zip php-xml php-mbstring php-bz2 php-intl

Habilitamos que SElinux permita la conexión:

[centos@salmorejo ~]$ setsebool -P httpd_execmem 1
[centos@salmorejo ~]$ chcon -t httpd_sys_rw_content_t /usr/share/nginx/html/nextcloud/ -R
[centos@salmorejo ~]$ setsebool -P httpd_can_network_connect 1
[centos@salmorejo ~]$ setfacl -R -m u:nginx:rwx /var/lib/php/opcache/
[centos@salmorejo ~]$ setfacl -R -m u:nginx:rwx /var/lib/php/session/
[centos@salmorejo ~]$ setfacl -R -m u:nginx:rwx /var/lib/php/wsdlcache/

Creamos la carpeta data, que es donde se almacenan los archivos del usuario nextcloud:

[centos@salmorejo ~]$ mkdir /usr/share/nginx/html/nextcloud-data
[centos@salmorejo ~]$ chown nginx:nginx /usr/share/nginx/html/nextcloud-data -R
[centos@salmorejo ~]$ chcon -t httpd_sys_rw_content_t /usr/share/nginx/html/nextcloud-data/ -R

Por último, para que no nos salte el error "504 Gateway Timeout", debemos hacer lo siguiente:

[centos@salmorejo ~]$ sudo nano /etc/php.ini
max_execution_time = 300

[centos@salmorejo ~]$ sudo nano /etc/php-fpm.d/www.conf
request_terminate_timeout = 300

Reiniciamos los servicios:

[centos@salmorejo ~]$ sudo systemctl restart nginx
[centos@salmorejo ~]$ sudo systemctl restart nginx

Probamos:

!datoscloud.png!


!funciocloud.png!


Añadimos un archivo nuestro a NextCloud:


!archivocloud.png!



--------------------
EXTRA PA CENTOS 8
centos
  MySQL-python.x86_64 0:1.2.5-1.el7            mariadb.x86_64 1:5.5.64-1.el7   
  mysql-connector-odbc.x86_64 0:5.2.5-8.el7

